precision highp float;

#include "utils.glslx"

// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

uniform mat4 world;
uniform mat4 worldViewProjection;
uniform mat4 rotation;
uniform vec3 camera;
uniform int clouds;
uniform float groundAlbedo;
uniform float cloudAlbedo;
uniform vec3 halo;
uniform vec3 light;
uniform vec3 upperColor;
uniform vec3 lowerColor;
uniform float base;
uniform float resolution;
uniform float seed;
uniform vec2 lowerClamp;
uniform vec2 lowerClip;
uniform int directNoise;
uniform vec2 range;

varying vec3 worldPosition;
varying vec3 _normal;

export void vertexSource() {
	gl_Position = worldViewProjection * vec4(position, 1.0);
	worldPosition = vec3(world * vec4(position, 1.0));
	_normal = normal;
}

export void fragmentSource() {
	vec3 worldNormal = normalize(vec3(world * vec4(_normal, 0.0)));

	// ground
	float luminance = luminance_at(_normal, base, resolution, seed);
	luminance = clamp(luminance < lowerClip.x ? luminance * lowerClip.y : luminance, 0.0, 1.0);
	vec3 color = directNoise > 0 ? vec3(luminance) : luminance_to_color(luminance, range, lowerColor, upperColor, lowerClamp);
	color *= groundAlbedo;

	// clouds
	vec3 cloud = vec3(luminance_at(vec3(rotation * vec4(_normal, 0.0)), base, resolution, seed) * cloudAlbedo);

	// diffuse
	float ndl = min(asin(max(0.0, dot(worldNormal, normalize(light - worldPosition))) + 0.05), 1.0);

	// Fresnel
	float fresnel = clamp(pow(0.65 + abs(dot(normalize(camera - worldPosition), worldNormal)), 16.0), 0.0, 1.0);

	// Emissive
	vec3 emissive = halo * (1.0 - fresnel) * clamp(1.0 - ndl, 0.2, 1.0);

	// Clouds
	float cloudLuminance = 0.0;

	if (clouds > 0)
	{
		cloudLuminance = dot(cloud, vec3(0.3, 0.59, 0.11));
	}

	if (cloudLuminance >= .5)
	{
		color += cloud * (cloudLuminance - .5) / .5;
	}

	gl_FragColor = vec4(color * ndl * fresnel + emissive, fresnel);
}
