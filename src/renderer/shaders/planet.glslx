precision highp float;

// Attributes
attribute vec3 position;
attribute vec3 normal;
attribute vec2 uv;

uniform mat4 world;
uniform mat4 worldViewProjection;
uniform mat4 rotation;
uniform vec3 camera;
uniform samplerCube textureSampler;
uniform samplerCube cloudSampler;
uniform int clouds;
uniform float groundAlbedo;
uniform float cloudAlbedo;
uniform vec3 halo;
uniform vec3 light;

varying vec3 worldPosition;
varying vec3 _normal;

export void vertexSource() {
	gl_Position = worldViewProjection * vec4(position, 1.0);
	worldPosition = vec3(world * vec4(position, 1.0));
	_normal = normal;
}

float computeFresnelTerm(vec3 viewDirection, vec3 worldNormal, float bias, float power)
{
	float fresnelTerm = pow(bias + abs(dot(viewDirection, worldNormal)), power);
	return clamp(fresnelTerm, 0.0, 1.0);
}

export void fragmentSource() {
	vec3 worldNormal = normalize(vec3(world * vec4(_normal, 0.0)));
	vec3 color = textureCube(textureSampler, _normal).rgb * groundAlbedo;
	vec3 cloud = textureCube(cloudSampler, vec3(rotation * vec4(_normal, 0.0))).rgb * cloudAlbedo;

	// diffuse
	float ndl = max(0.0, dot(worldNormal, normalize(light - worldPosition))) + 0.05;

	ndl = min(asin(ndl), 1.0);

	// Fresnel
	float fresnelTerm = computeFresnelTerm(normalize(camera - worldPosition), worldNormal, 0.65, 16.0);

	// Emissive
	vec3 emissiveColor = halo * (1.0 - fresnelTerm) * clamp(1.0 - ndl, 0.2, 1.0);

	// Clouds
	float cloudLuminance = 0.0;

	if (clouds > 0)
	{
		cloudLuminance = dot(cloud, vec3(0.3, 0.59, 0.11));
	}

	if (cloudLuminance >= .5)
	{
		color += cloud * (cloudLuminance - .5) / .5;
	}

	gl_FragColor = vec4(color * ndl * fresnelTerm + emissiveColor, fresnelTerm);
}
