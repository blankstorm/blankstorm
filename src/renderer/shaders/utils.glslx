const float PI = 3.14159265358979;

const vec4 prand_magic = vec4(12.9898, 78.233, 42.798, 89.5139);
const float prand_magic_2 = 43758.5453;

export float prand(float seed) {
	return fract(sin(seed * prand_magic.x) * prand_magic_2);
}

export float prand(vec2 seed) {
	return fract(sin(dot(seed, prand_magic.xy)) * prand_magic_2);
}

export float prand(vec3 seed) {
	return fract(sin(dot(seed, prand_magic.xyz)) * prand_magic_2);
}

export float prand(vec4 seed) {
	return fract(sin(dot(seed, prand_magic)) * prand_magic_2);
}

export vec4 prand(mat4 seed) {
	return vec4(prand(seed[0]), prand(seed[1]), prand(seed[2]), prand(seed[3]));
}

float prand_cos_mix(vec3 point, float seed) {
	vec3 f = floor(point);
	vec3 g = f + 1.0;
	vec3 a = (1.0 - cos(fract(point) * PI)) * 0.5;

	vec4 x = prand(mat4(
			f.x, f.y, f.z, seed,
			f.x, g.y, f.z, seed,
			f.x, f.y, g.z, seed,
			f.x, g.y, g.z, seed
		));

	vec4 y = prand(mat4(
			g.x, f.y, f.z, seed,
			g.x, g.y, f.z, seed,
			g.x, f.y, g.z, seed,
			g.x, g.y, g.z, seed
		));

	vec4 c4 = mix(x, y, a.x);
	vec2 c2 = mix(c4.xz, c4.yw, a.y);
	return mix(c2.x, c2.y, a.z);
}

export vec3 spherical(int face, vec2 uv) {
	uv -= 0.5;

	vec3 p = vec3(0.0);

	if (face == 0) { p = vec3(0.5, -uv.y, -uv.x); }
	if (face == 1) { p = vec3(-0.5, -uv.y, uv.x); }
	if (face == 2) { p = vec3(uv.x, 0.5, uv.y); }
	if (face == 3) { p = vec3(uv.x, -0.5, -uv.y); }
	if (face == 4) { p = vec3(uv.x, -uv.y, 0.5); }
	if (face == 5) { p = vec3(-uv.x, -uv.y, -0.5); }

	return normalize(p);
}

float prand_at_part(vec3 point, float resolution, float seed) {
	return prand_cos_mix((point + 1.0) / 2.0 * resolution, seed) * 2.0 - 1.0;
}

export float prand_at(vec3 point, float base, float resolution, float seed) {
	float factor = 1.0
		+ prand_at_part(point, resolution / 32.0, seed) * 0.8
		+ prand_at_part(point, resolution / 16.0, seed) * 0.4
		+ prand_at_part(point, resolution / 8.0, seed) * 0.2
		+ prand_at_part(point, resolution / 4.0, seed) * 0.1
		+ prand_at_part(point, resolution / 2.0, seed) * 0.05
		+ prand_at_part(point, resolution, seed) * 0.025;

	return clamp(factor * base, 0.0, 1.0);
}

export vec3 prand_to_color(float value, vec2 range, vec3 lowerColor, vec3 upperColor, vec2 lower_clamp) {
	if (value < range.x)
	{
		float scale = value / range.x;
		return lowerColor * clamp(scale, lower_clamp.x, lower_clamp.y);
	}
	else if (value < range.y)
	{
		float scale_left = (value - range.x) / (range.y - range.x);
		float scale_right = (value - range.x) / (1.0 - range.x);
		return lowerColor * (1.0 - scale_left) + upperColor * scale_right;
	}
	else
	{
		float scale = (value - range.x) / (1.0 - range.x);
		return upperColor * scale;
	}
}
