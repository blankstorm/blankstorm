const float PI = 3.14159265358979;

const vec4 randomMagic = vec4(12.9898, 78.233, 42.798, 89.5139);
const float randomMagicA = 43758.5453;

export float prand(float seed) {
	return fract(sin(seed * randomMagic.x) * randomMagicA);
}

export float prand(vec2 seed) {
	return fract(sin(dot(seed, randomMagic.xy)) * randomMagicA);
}

export float prand(vec3 seed) {
	return fract(sin(dot(seed, randomMagic.xyz)) * randomMagicA);
}

export float prand(vec4 seed) {
	return fract(sin(dot(seed, randomMagic)) * randomMagicA);
}

export vec4 prand(mat4 seed) {
	return vec4(prand(seed[0]), prand(seed[1]), prand(seed[2]), prand(seed[3]));
}

float prand_sample(float x, float y, float z, sampler2D sampler) {
	vec3 p = vec3(x, y, z);
	return texture2D(sampler, vec2(prand(p.xy), prand(p.yz))).g;
}

float prand_cos_mix(vec3 point, sampler2D sampler) {
	vec3 f = floor(point);
	vec3 g = f + 1.0;
	vec3 a = (1.0 - cos(fract(point) * PI)) * 0.5;

	vec4 x = vec4(
		prand_sample(f.x, f.y, f.z, sampler),
		prand_sample(f.x, g.y, f.z, sampler),
		prand_sample(f.x, f.y, g.z, sampler),
		prand_sample(f.x, g.y, g.z, sampler)
	);

	vec4 y = vec4(
		prand_sample(g.x, f.y, f.z, sampler),
		prand_sample(g.x, g.y, f.z, sampler),
		prand_sample(g.x, f.y, g.z, sampler),
		prand_sample(g.x, g.y, g.z, sampler)
	);

	vec4 c4 = mix(x, y, a.x);
	vec2 c2 = mix(c4.xz, c4.yw, a.y);
	return mix(c2.x, c2.y, a.z);
}

float prand_cos_mix(vec3 point, float seed) {
	vec3 f = floor(point);
	vec3 g = f + 1.0;
	vec3 a = (1.0 - cos(fract(point) * PI)) * 0.5;

	vec4 x = prand(mat4(
			f.x, f.y, f.z, seed,
			f.x, g.y, f.z, seed,
			f.x, f.y, g.z, seed,
			f.x, g.y, g.z, seed
		));

	vec4 y = prand(mat4(
			g.x, f.y, f.z, seed,
			g.x, g.y, f.z, seed,
			g.x, f.y, g.z, seed,
			g.x, g.y, g.z, seed
		));

	vec4 c4 = mix(x, y, a.x);
	vec2 c2 = mix(c4.xz, c4.yw, a.y);
	return mix(c2.x, c2.y, a.z);
}

float scalar_field_factor(vec3 v, float resolution, sampler2D seed) {
	return prand_cos_mix((v + 1.0) / 2.0 * resolution, seed) * 2.0 - 1.0;
}

export float scalar_field(vec3 v, float seed, float resolution, sampler2D sampler) {
	float c = seed;
	// c = seed * Product 1 + helper(v, resolution / 2 ^ [[5..0]], seed) * 0.8 / 2^[[0..5]]
	c *= 1.0 + scalar_field_factor(v, resolution / 32.0, sampler) * 0.8;
	c *= 1.0 + scalar_field_factor(v, resolution / 16.0, sampler) * 0.4;
	c *= 1.0 + scalar_field_factor(v, resolution / 8.0, sampler) * 0.2;
	c *= 1.0 + scalar_field_factor(v, resolution / 4.0, sampler) * 0.1;
	c *= 1.0 + scalar_field_factor(v, resolution / 2.0, sampler) * 0.05;
	c *= 1.0 + scalar_field_factor(v, resolution, sampler) * 0.025;

	return clamp(c, 0.0, 1.0);
}

export vec3 to_spherical(int face, vec2 uv) {
	uv -= 0.5;

	if (face == 0) { return vec3(0.5, -uv.y, -uv.x); }
	if (face == 1) { return vec3(-0.5, -uv.y, uv.x); }
	if (face == 2) { return vec3(uv.x, 0.5, uv.y); }
	if (face == 3) { return vec3(uv.x, -0.5, -uv.y); }
	if (face == 4) { return vec3(uv.x, -uv.y, 0.5); }
	else { return vec3(-uv.x, -uv.y, -0.5); }
}

export vec3 to_spherical(int face, vec2 xy, float size) {
	return to_spherical(face, xy / size);
}
