precision highp float;
#include "utils.glslx"

varying vec2 vUV;

uniform vec3 upperColor;
uniform vec3 lowerColor;
uniform float face;
uniform sampler2D randomSampler;
uniform float mapSize;
uniform float maxResolution;
uniform float seed;
uniform vec2 lowerClamp;

export void fragmentSource() {
	vec3 spherical = sphericalCoord(face, vUV * mapSize, mapSize);

	float luminance = scalarField(spherical, seed, maxResolution, randomSampler);

	if (luminance < 0.3) 
	{
		float scale0 = luminance / 0.3;
		gl_FragColor = vec4(lowerColor, 1.0) * clamp(scale0, lowerClamp.x, lowerClamp.y);
	}
	else if (luminance < 0.4)
	{
		float scaleLeft1 = (luminance - 0.3) / (0.4 - 0.3);
		float scaleRight1 = (luminance - 0.3) / (1.0 - 0.3);
		gl_FragColor = vec4(lowerColor, 1.0) * (1.0 - scaleLeft1) + vec4(upperColor, 1.0) * scaleRight1;
	}
	else
	{
		float scale2 = (luminance - 0.3) / (1.0 - 0.3);
		gl_FragColor = vec4(upperColor, 1.0) * scale2; 
	}
}