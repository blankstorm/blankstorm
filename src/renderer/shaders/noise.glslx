precision highp float;
#include "utils.glslx"

varying vec2 vUV;

uniform vec3 upperColor;
uniform vec3 lowerColor;
uniform float face;
uniform sampler2D randomSampler;
uniform float mapSize;
uniform float maxResolution;
uniform float seed;
uniform vec2 lowerClamp;
uniform vec3 options;
uniform vec2 range;

export void noiseFragmentShader() {
	vec3 sphericalCoord = getSphericalCoord(face, vUV * mapSize, mapSize);

	float luminance = scalarField(sphericalCoord, seed, maxResolution, randomSampler);

	if (options.x > 0.)
	{
		gl_FragColor = vec4(luminance, luminance, luminance, 1.0);
	}
	else
	{
		if (luminance < range.x)
		{
			float scale0 = luminance / range.x;
			gl_FragColor = vec4(lowerColor, 1.0) * clamp(scale0, lowerClamp.x, lowerClamp.y);
		}
		else if (luminance < range.y)
		{
			float scaleLeft1 = (luminance - range.x) / (range.y - range.x);
			float scaleRight1 = (luminance - range.x) / (1.0 - range.x);
			gl_FragColor = vec4(lowerColor, 1.0) * (1.0 - scaleLeft1) + vec4(upperColor, 1.0) * scaleRight1;
		}
		else
		{
			float scale2 = (luminance - range.x) / (1.0 - range.x);
			gl_FragColor = vec4(upperColor, 1.0) * scale2;
		}
	}
}